/* SPDX-License-Identifier: (LGPL-2.1 OR BSD-2-Clause) */

/* THIS FILE IS AUTOGENERATED BY BPFTOOL! */
#ifndef __XDP_REDIRECT_SKEL_H__
#define __XDP_REDIRECT_SKEL_H__

#include <errno.h>
#include <stdlib.h>
#include <bpf/libbpf.h>

struct xdp_redirect {
	struct bpf_object_skeleton *skeleton;
	struct bpf_object *obj;
	struct {
		struct bpf_program *xdp_redirect_func;
	} progs;
	struct {
		struct bpf_link *xdp_redirect_func;
	} links;

#ifdef __cplusplus
	static inline struct xdp_redirect *open(const struct bpf_object_open_opts *opts = nullptr);
	static inline struct xdp_redirect *open_and_load();
	static inline int load(struct xdp_redirect *skel);
	static inline int attach(struct xdp_redirect *skel);
	static inline void detach(struct xdp_redirect *skel);
	static inline void destroy(struct xdp_redirect *skel);
	static inline const void *elf_bytes(size_t *sz);
#endif /* __cplusplus */
};

static void
xdp_redirect__destroy(struct xdp_redirect *obj)
{
	if (!obj)
		return;
	if (obj->skeleton)
		bpf_object__destroy_skeleton(obj->skeleton);
	free(obj);
}

static inline int
xdp_redirect__create_skeleton(struct xdp_redirect *obj);

static inline struct xdp_redirect *
xdp_redirect__open_opts(const struct bpf_object_open_opts *opts)
{
	struct xdp_redirect *obj;
	int err;

	obj = (struct xdp_redirect *)calloc(1, sizeof(*obj));
	if (!obj) {
		errno = ENOMEM;
		return NULL;
	}

	err = xdp_redirect__create_skeleton(obj);
	if (err)
		goto err_out;

	err = bpf_object__open_skeleton(obj->skeleton, opts);
	if (err)
		goto err_out;

	return obj;
err_out:
	xdp_redirect__destroy(obj);
	errno = -err;
	return NULL;
}

static inline struct xdp_redirect *
xdp_redirect__open(void)
{
	return xdp_redirect__open_opts(NULL);
}

static inline int
xdp_redirect__load(struct xdp_redirect *obj)
{
	return bpf_object__load_skeleton(obj->skeleton);
}

static inline struct xdp_redirect *
xdp_redirect__open_and_load(void)
{
	struct xdp_redirect *obj;
	int err;

	obj = xdp_redirect__open();
	if (!obj)
		return NULL;
	err = xdp_redirect__load(obj);
	if (err) {
		xdp_redirect__destroy(obj);
		errno = -err;
		return NULL;
	}
	return obj;
}

static inline int
xdp_redirect__attach(struct xdp_redirect *obj)
{
	return bpf_object__attach_skeleton(obj->skeleton);
}

static inline void
xdp_redirect__detach(struct xdp_redirect *obj)
{
	bpf_object__detach_skeleton(obj->skeleton);
}

static inline const void *xdp_redirect__elf_bytes(size_t *sz);

static inline int
xdp_redirect__create_skeleton(struct xdp_redirect *obj)
{
	struct bpf_object_skeleton *s;
	int err;

	s = (struct bpf_object_skeleton *)calloc(1, sizeof(*s));
	if (!s)	{
		err = -ENOMEM;
		goto err;
	}

	s->sz = sizeof(*s);
	s->name = "xdp_redirect";
	s->obj = &obj->obj;

	/* programs */
	s->prog_cnt = 1;
	s->prog_skel_sz = sizeof(*s->progs);
	s->progs = (struct bpf_prog_skeleton *)calloc(s->prog_cnt, s->prog_skel_sz);
	if (!s->progs) {
		err = -ENOMEM;
		goto err;
	}

	s->progs[0].name = "xdp_redirect_func";
	s->progs[0].prog = &obj->progs.xdp_redirect_func;
	s->progs[0].link = &obj->links.xdp_redirect_func;

	s->data = xdp_redirect__elf_bytes(&s->data_sz);

	obj->skeleton = s;
	return 0;
err:
	bpf_object__destroy_skeleton(s);
	return err;
}

static inline const void *xdp_redirect__elf_bytes(size_t *sz)
{
	static const char data[] __attribute__((__aligned__(8))) = "\
\x7f\x45\x4c\x46\x02\x01\x01\0\0\0\0\0\0\0\0\0\x01\0\xf7\0\x01\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x80\x02\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\x40\0\x07\0\
\x01\0\xb7\0\0\0\x02\0\0\0\x61\x12\x04\0\0\0\0\0\x61\x17\0\0\0\0\0\0\xbf\x73\0\
\0\0\0\0\0\x07\x03\0\0\x0e\0\0\0\x2d\x23\x24\0\0\0\0\0\x71\x71\x0c\0\0\0\0\0\
\x71\x74\x0d\0\0\0\0\0\x67\x04\0\0\x08\0\0\0\x4f\x14\0\0\0\0\0\0\x55\x04\x1f\0\
\x08\0\0\0\xbf\x76\0\0\0\0\0\0\x07\x06\0\0\x22\0\0\0\x2d\x26\x1c\0\0\0\0\0\x71\
\x71\x17\0\0\0\0\0\x55\x01\x1a\0\x11\0\0\0\xbf\x71\0\0\0\0\0\0\x07\x01\0\0\x2a\
\0\0\0\x2d\x21\x17\0\0\0\0\0\xb7\x01\0\0\x23\x31\0\0\x6b\x17\x24\0\0\0\0\0\xb7\
\x01\0\0\x81\x17\x0c\x3e\x63\x17\x1e\0\0\0\0\0\xb7\x08\0\0\0\0\0\0\x6b\x87\x18\
\0\0\0\0\0\x71\x74\x0e\0\0\0\0\0\x67\x04\0\0\x02\0\0\0\x57\x04\0\0\x3c\0\0\0\
\xb7\x01\0\0\0\0\0\0\xb7\x02\0\0\0\0\0\0\xb7\x05\0\0\0\0\0\0\x85\0\0\0\x1c\0\0\
\0\x6b\x07\x18\0\0\0\0\0\x6b\x87\x28\0\0\0\0\0\xb7\x01\0\0\0\0\0\0\xb7\x02\0\0\
\0\0\0\0\xbf\x63\0\0\0\0\0\0\xb7\x04\0\0\x08\0\0\0\xb7\x05\0\0\0\0\0\0\x85\0\0\
\0\x1c\0\0\0\x6b\x07\x28\0\0\0\0\0\xb7\0\0\0\x03\0\0\0\x95\0\0\0\0\0\0\0\x47\
\x50\x4c\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x3d\0\0\0\
\x04\0\xf1\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x5c\0\0\0\0\0\x03\0\x50\x01\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\x2b\0\0\0\x12\0\x03\0\0\0\0\0\0\0\0\0\x58\x01\0\0\0\0\
\0\0\x22\0\0\0\x11\0\x04\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\x03\x04\0\x2e\x74\
\x65\x78\x74\0\x78\x64\x70\x5f\x72\x65\x64\x69\x72\x65\x63\x74\0\x2e\x6c\x6c\
\x76\x6d\x5f\x61\x64\x64\x72\x73\x69\x67\0\x5f\x6c\x69\x63\x65\x6e\x73\x65\0\
\x78\x64\x70\x5f\x72\x65\x64\x69\x72\x65\x63\x74\x5f\x66\x75\x6e\x63\0\x78\x64\
\x70\x5f\x72\x65\x64\x69\x72\x65\x63\x74\x2e\x63\0\x2e\x73\x74\x72\x74\x61\x62\
\0\x2e\x73\x79\x6d\x74\x61\x62\0\x4c\x42\x42\x30\x5f\x36\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x4c\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\x1a\x02\0\0\0\0\0\0\x63\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\x01\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x40\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\x07\0\0\0\x01\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\0\0\x58\
\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x23\0\0\0\
\x01\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x98\x01\0\0\0\0\0\0\x04\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x14\0\0\0\x03\x4c\xff\
\x6f\0\0\0\x80\0\0\0\0\0\0\0\0\0\0\0\0\x18\x02\0\0\0\0\0\0\x02\0\0\0\0\0\0\0\
\x06\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x54\0\0\0\x02\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\xa0\x01\0\0\0\0\0\0\x78\0\0\0\0\0\0\0\x01\0\0\0\x03\
\0\0\0\x08\0\0\0\0\0\0\0\x18\0\0\0\0\0\0\0";

	*sz = sizeof(data) - 1;
	return (const void *)data;
}

#ifdef __cplusplus
struct xdp_redirect *xdp_redirect::open(const struct bpf_object_open_opts *opts) { return xdp_redirect__open_opts(opts); }
struct xdp_redirect *xdp_redirect::open_and_load() { return xdp_redirect__open_and_load(); }
int xdp_redirect::load(struct xdp_redirect *skel) { return xdp_redirect__load(skel); }
int xdp_redirect::attach(struct xdp_redirect *skel) { return xdp_redirect__attach(skel); }
void xdp_redirect::detach(struct xdp_redirect *skel) { xdp_redirect__detach(skel); }
void xdp_redirect::destroy(struct xdp_redirect *skel) { xdp_redirect__destroy(skel); }
const void *xdp_redirect::elf_bytes(size_t *sz) { return xdp_redirect__elf_bytes(sz); }
#endif /* __cplusplus */


#endif /* __XDP_REDIRECT_SKEL_H__ */
